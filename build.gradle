plugins {
    id 'java'
    id 'maven-publish'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.jetbrains.kotlin.jvm'
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            url = 'https://repo.runelite.net'
        }
        mavenCentral()
        jcenter()
    }

    def runeLiteVersion = '1.10.37'

    plugins.withType(JavaPlugin) {
        dependencies {
            compileOnly 'org.projectlombok:lombok:1.18.20'
            annotationProcessor 'org.projectlombok:lombok:1.18.20'
            compileOnly group: 'net.runelite', name: 'client', version: runeLiteVersion
            testImplementation 'junit:junit:4.12'
            testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion
            testImplementation group: 'net.runelite', name: 'jshell', version: runeLiteVersion
        }
    }
}

dependencies {
    implementation project(path: ':AutoTitheFarm')
    implementation project(path: ':AutoAerial')
    implementation project(path: ':AutoBoner')
    implementation project(path: ':AutoChompy')
    implementation project(path: ':AutoTrapper')
    implementation project(path: ':AutoSmith')
    implementation project(path: ':ButterflyCatcher')
    implementation project(path: ':CluePuzzleSolver')
    implementation project(path: ':DialogueContinuer')
    implementation project(path: ':Firemaking')
    implementation project(path: ':KittenFeeder')
    implementation project(path: ':AutoJugHumidifier')
    implementation project(path: ':AutoRifts')
    implementation project(path: ':AutoTele')
    implementation project(path: ':CalvarionHelper')
    implementation project(path: ':E3T4G')
    implementation project(path: ':EthansApi')
    implementation project(path: ':ChinBreakHandler')
    implementation project(path: ':GauntletFlicker')
    implementation project(path: ':Harpoon2Ticker')
    implementation project(path: ':HerbCleaner')
    implementation project(path: ':ItemCombiner')
    implementation project(path: ':ItemDropper')
    implementation project(path: ':JadAutoPrayers')
    implementation project(path: ':LavaRunecrafter')
    implementation project(path: ':NightmareHelper')
    implementation project(path: ':OneTickSwitcher')
    implementation project(path: ':PiggyUtils')
    implementation project(path: ':PowerSkiller')
    implementation project(path: ':PrayerFlicker')
    implementation project(path: ':PrayAgainstPlayer')
    implementation project(path: ':RooftopAgility')
    implementation project(path: ':RunEnabler')
    implementation project(path: ':ShiftClickWalker')
    implementation project(path: ':SixHourLog')
    implementation project(path: ':SpeedDartMaker')
    implementation project(path: ':SuperglassMake')
    implementation project(path: ':UpkeepPlugin')
    implementation project(path: ':VardorvisHelper')
    implementation project(path: ':DropParty')
    implementation project(path: ':BetterProfiles')
    implementation project(path: ':PathingTesting')
    implementation project(path: ':LeftClickBlackJack')
    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.20" // Add Kotlin standard library
    testImplementation project(':AutoChop')
    testImplementation project(':AutoVorkath')
    testImplementation project(':RSNHider')
    testImplementation project(':AutoLeviathanPrayers')
    testImplementation project(':AutoWhispererPrayers')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/kotlin"] // Include Kotlin source directory
        }
    }
    test {
        java {
            srcDirs = ["src/test/java", "src/test/kotlin"] // Include Kotlin test directory
        }
    }
}

group = 'com.piggyplugins'
version = '1.3.4'
sourceCompatibility = "11"

task FatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.example.Main'
    }
    baseName = 'piggy-plugins-aio'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task PiggyJar(type: Jar) {
    manifest {
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

subprojects {
    tasks.withType(Jar) {
        doLast {
            copy {
                from("./build/libs/")
                into("../release/")
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username 'admin'
                password 'password'
            }
            url "http://baseUrl/artifactory/libs-release-local"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
targetCompatibility = JavaVersion.VERSION_11
repositories {
    mavenCentral()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
